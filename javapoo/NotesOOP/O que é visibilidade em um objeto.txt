O que √© visibilidade em um objeto? 
>> Linguagem de Modelagem Unificada:

A Linguagem de Modelagem Unificada (UML - Unified Modeling Language) √© uma ferramenta para visualizar, documentar e planejar o desenvolvimento de sistemas orientados a objetos, incluindo aqueles feitos em Java.

Ela n√£o √© uma linguagem de programa√ß√£o, mas sim uma linguagem de modelagem que ajuda os desenvolvedores a entenderem e projetarem um sistema antes de escreverem c√≥digo.

>> Como a UML se relaciona com Java?

-- Ajuda a planejar o c√≥digo: Antes de programar, voc√™ pode criar diagramas UML para organizar as classes, m√©todos e intera√ß√µes do sistema.

-- Facilita a comunica√ß√£o: Se v√°rias pessoas est√£o trabalhando no projeto, os diagramas UML ajudam a todos entenderem como o sistema funciona.

-- Documenta o sistema: Serve como refer√™ncia para futuras manuten√ß√µes no c√≥digo.
Principais Diagramas UML usados em Java:

1.Diagrama de Classes ‚Üí Mostra as classes, atributos, m√©todos e relacionamentos.

2.Diagrama de Objetos ‚Üí Representa inst√¢ncias espec√≠ficas das classes em determinado momento.

3.Diagrama de Sequ√™ncia ‚Üí Explica como os objetos interagem ao longo do tempo.

4.Diagrama de Casos de Uso ‚Üí Mostra como os usu√°rios interagem com o sistema.

Em resumo, a UML ajuda a estruturar o c√≥digo Java antes de programar, tornando o desenvolvimento mais organizado e compreens√≠vel.

--------------------------------------------------------------------------------------
>> Modificadores de visibilidade/acesso:

Os modificadores de visibilidade (ou de acesso) em Java controlam quem pode acessar atributos e m√©todos de uma classe. Eles s√£o fundamentais para proteger os dados e garantir um bom encapsulamento.

Principais Modificadores de Visibilidade:
public (p√∫blico)

1.0. Pode ser acessado de qualquer lugar dentro e fora da classe.
Exemplo:

public class Pessoa {
    public String nome;
}
private (privado)

1.2. Pode ser acessado somente dentro da pr√≥pria classe.
Exemplo:

public class Pessoa {
    private int idade;
}

1.3. Para acessar um atributo private, usamos m√©todos getters e setters:

public int getIdade() {
    return idade;
}

public void setIdade(int idade) {
    this.idade = idade;
}
protected (protegido)

1.4.Pode ser acessado na pr√≥pria classe, nas subclasses e no mesmo pacote.
Exemplo:

public class Animal {
    protected String especie;
}

1.5. Se outra classe for uma subclasse, ela pode acessar o atributo especie diretamente.
Sem modificador (default ou "package-private")

Se nenhum modificador for especificado, o acesso fica restrito ao mesmo pacote.
Exemplo:

class Carro {
    String modelo; // S√≥ pode ser acessado dentro do mesmo pacote
}

Resumo em Tabela:

Modificador	Mesma Classe	Mesmo Pacote	Subclasses	Fora da Classe
(+)public	‚úÖ		‚úÖ		‚úÖ		‚úÖ
(#)protected	‚úÖ		‚úÖ		‚úÖ		‚ùå
(default)	‚úÖ		‚úÖ		‚ùå		‚ùå
(-)private	‚úÖ		‚ùå		‚ùå		‚ùå

üí° Dica:

‚Üí Use private para proteger dados e s√≥ permitir acesso com m√©todos espec√≠ficos.
‚Üí Use public apenas quando for realmente necess√°rio.
‚Üí Use protected quando quiser permitir acesso em subclasses.
‚Üí O modificador padr√£o √© √∫til para organizar classes dentro do mesmo pacote.

Resumo:

>> Modificadores de Visiblidade: Indica o n√≠vel de acesso aos componentes internos de uma classe(atributos e m√©todos).

piblic[+]: A classe atual e todas as outras classes possam ter acesso a ela(todo mundo vai poder ver ou usar esse atributo).

protected[#]: A classe atual e todas as suas sub-classes.

private[-]: Somente a classe atual.



















