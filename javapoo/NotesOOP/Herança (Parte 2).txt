Heran√ßa (Parte 2)

üß™Exemplo - Navega√ß√£o Pela Heran√ßa:

		            +---------+
		            |    A    | üå≥ Root
		            +---------+
		     	         ‚Üë
     +---------------------------+------------------------------+
     |		       	         |			        |
+----------+                +----------+                  +------------+	
|    AA    | //üëß/üßì	    |    AB    | //üëß/üßì         |     AC     | //üëß/üßì
+----------+	            +----------+                  +------------+
     ‚Üë                           ‚Üë                              ‚Üë
     |                 +---------+----------+                   |
     |                 |                    |                   |
+----------+     +-----------+        +------------+      +------------+
|   AAA    |     |    ABA    |        |     ABB    |      |     ACA    |
+----------+     +-----------+        +------------+      +------------+
//üçÉ folha/üëß   //üëß/üßì	     	  //üçÉ folha/üëß	  //üçÉ folha/üëß	
			 ‚Üë
                +--------+--------+
	        |		  |
           +----------+	     +----------+
           |   ABAA   |	     |   ABAB   |
           +----------+	     +----------+
           //üçÉ folha/üëß	 //üçÉ folha/üëß


üß†Conceito:

üîπ A classe 'A' √© progenitora de 'AA', 'AB' e 'AC'. Mas isso vai depender do ponto de vista, por exemplo, 'AB' tamb√©m pode ser chamada de progenitora, pois √© m√£e(superclasse) de 'ABA' e 'ABB'. Ent√£o, no ponto de vista em que 'A' √© classe principal, 'AB' √© uma subclasse. Mas no ponto de vista de 'AB'(superclasse), 'ABA' e 'ABB' s√£o subclasses.

>>üå≥ Root: Uma classe que n√£o √© subclasse. N√£o tem uma super classe(üßì).

>>üçÉ Folha: Subclasse que n√£o possui subclasses(üëß). N√£o tem classes filhas. 

>> Descendentes: Vamos pensar no ponto de vista de 'A', 'AC' n√£o √© descendente de 'A', e sim filha(üëß) de 'A'. 'AC' t√™m uma filha,  'ACA' que √© descendente de 'A'.

>> Ancestrais: Dos nestos adiante.

üîπEspecializa√ß√£o: √â quando percoremos a arvore de cima para baixo
üîπGeneraliza√ß√£o: √â quando percoremos a arvore de baixo para cima.

üß¨Tipos de Heran√ßa:

üîπ1. Heran√ßa de implementa√ß√£o(pobre, mais simples)
üîπ2. Heran√ßa para diferen√ßa(Mais completa)

üß™Exemplo - Diagrama de Heran√ßa(de forma abstrata):

					   üë§Classe Pessoa (abstract):
					   ‚ûù (-) nome;
			    +----------+   ‚ûù (-) idade;
			    |  Pessoa  |   ‚ûù (-) sexo;
			    +----------+   ‚ûù (public method final) fazerAniversario()	
		                 ‚Üë
              +------------------+------------------+
	      |		         |		    |
	      |  		 |		    |	        üßë‚Äçüè´Classe Professor:
	+-------------+		 |            +-------------+   üß¨extends: 'Pessoa';
        |  Visitante  |		 |	      |  Professor  |   ‚ûù especialidade;
        +-------------+		 |	      +-------------+   ‚ûù salario;
        		         |           		        ‚ûù receberAumento()
				 |
üö∂Classe Visitante:       +-------------+  üë®‚ÄçüéìClasse Aluno:
‚ûù ...			  |    Aluno    |   ‚ûù (-) matricula;
‚ûù heran√ßa implementa√ßao	  +-------------+   ‚ûù (-) curso;
‚ûù üß¨extends 'Pessoa';      	 ‚Üë	    ‚ûù (+) pagarMensalidade()
          			 |	    ‚ûù üß¨extends:'Pessoa';
		        +--------+----------+
		        |	 	    |
		 +------------+       +-----------+  üõ†Ô∏èClasse T√©cnico:
		 |  Bolsista  |       |  T√©cnico  |  ‚ûù registroProfissional;
 	 	 +------------+       +-----------+  ‚ûù praticar()
						     üß¨extends: 'Aluno';
		üí∞Classe Bolsista:
		‚ûù üß¨extends 'Aluno';
		‚ûù (-) bolsa;
		‚ûù (+) renovarBolsa()
		‚ûù (+) pagarMensalidade() //@Sobrepor


Observa√ß√µes:

>> A classe Pessoa √© uma classe gen√©rica, abstrata.

>> Visitante, aluno e professor herdam tudo aquilo que a classe pessoa tem.

>> A classe Visitante n√£o implementa nenhum atributo ou m√©todo, ter√° apenas oque herdar da root. √à uma heran√ßa pobre.

>> As classes 'Bolsista' e 'T√©cnico' s√£o implementa√ß√µes da classe 'Aluno'. Ambos possuem as mesmas caracter√≠sticas de 'Aluno', o 'Bolsista' √© uma especializa√ß√£o da generaliza√ß√£o de 'Aluno'

üß†Conceito: Abstrato e Final

>> O entendimento dos termos 'Abstrato' e 'Final' vai depender de onde voc√™ esta aplicando-o, um m√©todo e uma classe podem ser abstratos e finais. A funcionalidade/operacionalidade ser√° diferente.  

üîπClasse Abstrata:
>> "n√£o pode ser instanciada. S√≥ pode servir como progenitora."
>> Quando temos uma determinada classe e definimos ela como abstrata, ela n√£o pode gerar objetos. 

üîπM√©todo Abstrato:
>> "Declarado, mas n√£o implementado na progenitora."
>> Um m√©todo abstrato s√≥ pode ser colocado dentro de uma interface ou de uma classe abstrata.

üîπClasse Final:
>> "N√£o pode ser herdada por outra classe. Obrigatoriamente folha"
>> Ou seja, uma classe final n√£o pode ter classes filhas.

üîπM√©todo Final:
>> "N√£o pode ser sobrescrito pelas suas subclasses. Obrigatoriamente herdado."
>> //conceito de sobreposi√ß√£o//
























































